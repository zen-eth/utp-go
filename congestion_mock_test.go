// Code generated by MockGen. DO NOT EDIT.
// Source: rs/sent_packet.go
//
// Generated by this command:
//
//      mockgen -source=rs/sent_packet.go Controller
//

// Package mock_rs is a generated GoMock package.
package utp_go

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
	isgomock struct{}
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// BytesAvailableInWindow mocks base method.
func (m *MockController) BytesAvailableInWindow() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesAvailableInWindow")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// BytesAvailableInWindow indicates an expected call of BytesAvailableInWindow.
func (mr *MockControllerMockRecorder) BytesAvailableInWindow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesAvailableInWindow", reflect.TypeOf((*MockController)(nil).BytesAvailableInWindow))
}

// OnAck mocks base method.
func (m *MockController) OnAck(seqNum uint16, ack Ack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnAck", seqNum, ack)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnAck indicates an expected call of OnAck.
func (mr *MockControllerMockRecorder) OnAck(seqNum, ack any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAck", reflect.TypeOf((*MockController)(nil).OnAck), seqNum, ack)
}

// OnLostPacket mocks base method.
func (m *MockController) OnLostPacket(seqNum uint16, retransmitting bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnLostPacket", seqNum, retransmitting)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnLostPacket indicates an expected call of OnLostPacket.
func (mr *MockControllerMockRecorder) OnLostPacket(seqNum, retransmitting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnLostPacket", reflect.TypeOf((*MockController)(nil).OnLostPacket), seqNum, retransmitting)
}

// OnTimeout mocks base method.
func (m *MockController) OnTimeout() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onTimeout")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTimeout indicates an expected call of OnTimeout.
func (mr *MockControllerMockRecorder) OnTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onTimeout", reflect.TypeOf((*MockController)(nil).OnTimeout))
}

// OnTransmit mocks base method.
func (m *MockController) OnTransmit(seqNum uint16, transmit Transmit, dataLen uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTransmit", seqNum, transmit, dataLen)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTransmit indicates an expected call of OnTransmit.
func (mr *MockControllerMockRecorder) OnTransmit(seqNum, transmit, dataLen any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTransmit", reflect.TypeOf((*MockController)(nil).OnTransmit), seqNum, transmit, dataLen)
}

// Timeout mocks base method.
func (m *MockController) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockControllerMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockController)(nil).Timeout))
}
