// Code generated by MockGen. DO NOT EDIT.
// Source: utp_socket.go
//
// Generated by this command:
//
//	mockgen -source=utp_socket.go -destination=integrated/socket_mock_test.go
//

// Package mock_utp_go is a generated GoMock package.
package integrated

import (
	reflect "reflect"

	utp_go "github.com/optimism-java/utp-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPeerInfo is a mock of PeerInfo interface.
type MockPeerInfo struct {
	ctrl     *gomock.Controller
	recorder *MockPeerInfoMockRecorder
	isgomock struct{}
}

// MockPeerInfoMockRecorder is the mock recorder for MockPeerInfo.
type MockPeerInfoMockRecorder struct {
	mock *MockPeerInfo
}

// NewMockPeerInfo creates a new mock instance.
func NewMockPeerInfo(ctrl *gomock.Controller) *MockPeerInfo {
	mock := &MockPeerInfo{ctrl: ctrl}
	mock.recorder = &MockPeerInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerInfo) EXPECT() *MockPeerInfoMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPeerInfo) Hash() [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockPeerInfoMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPeerInfo)(nil).Hash))
}

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
	isgomock struct{}
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// ReadFrom mocks base method.
func (m *MockConn) ReadFrom(b []byte) (int, utp_go.ConnectionPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(utp_go.ConnectionPeer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom.
func (mr *MockConnMockRecorder) ReadFrom(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockConn)(nil).ReadFrom), b)
}

// WriteTo mocks base method.
func (m *MockConn) WriteTo(b []byte, dst utp_go.ConnectionPeer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", b, dst)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockConnMockRecorder) WriteTo(b, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockConn)(nil).WriteTo), b, dst)
}
